/*
 * Hashset Type
 */
SELECT '{}'::int4hashset; -- empty int4hashset
 int4hashset 
-------------
 {}
(1 row)

SELECT '{1,2,3}'::int4hashset;
 int4hashset 
-------------
 {3,2,1}
(1 row)

SELECT '{-2147483648,0,2147483647}'::int4hashset;
        int4hashset         
----------------------------
 {0,2147483647,-2147483648}
(1 row)

SELECT '{-2147483649}'::int4hashset; -- out of range
ERROR:  value "-2147483649}" is out of range for type integer
LINE 1: SELECT '{-2147483649}'::int4hashset;
               ^
SELECT '{2147483648}'::int4hashset; -- out of range
ERROR:  value "2147483648}" is out of range for type integer
LINE 1: SELECT '{2147483648}'::int4hashset;
               ^
/*
 * Hashset Functions
 */
SELECT int4hashset();
 int4hashset 
-------------
 {}
(1 row)

SELECT int4hashset(
    capacity := 10,
    load_factor := 0.9,
    growth_factor := 1.1,
    hashfn_id := 1
);
 int4hashset 
-------------
 {}
(1 row)

SELECT hashset_add(int4hashset(), 123);
 hashset_add 
-------------
 {123}
(1 row)

SELECT hashset_add(NULL::int4hashset, 123);
 hashset_add 
-------------
 {123}
(1 row)

SELECT hashset_add('{123}'::int4hashset, 456);
 hashset_add 
-------------
 {456,123}
(1 row)

SELECT hashset_contains('{123,456}'::int4hashset, 456); -- true
 hashset_contains 
------------------
 t
(1 row)

SELECT hashset_contains('{123,456}'::int4hashset, 789); -- false
 hashset_contains 
------------------
 f
(1 row)

SELECT hashset_merge('{1,2}'::int4hashset, '{2,3}'::int4hashset);
 hashset_merge 
---------------
 {3,1,2}
(1 row)

SELECT hashset_to_array('{1,2,3}'::int4hashset);
 hashset_to_array 
------------------
 {3,2,1}
(1 row)

SELECT hashset_count('{1,2,3}'::int4hashset); -- 3
 hashset_count 
---------------
             3
(1 row)

SELECT hashset_capacity(int4hashset(capacity := 10)); -- 10
 hashset_capacity 
------------------
               10
(1 row)

SELECT hashset_intersection('{1,2}'::int4hashset,'{2,3}'::int4hashset);
 hashset_intersection 
----------------------
 {2}
(1 row)

SELECT hashset_difference('{1,2}'::int4hashset,'{2,3}'::int4hashset);
 hashset_difference 
--------------------
 {1}
(1 row)

SELECT hashset_symmetric_difference('{1,2}'::int4hashset,'{2,3}'::int4hashset);
 hashset_symmetric_difference 
------------------------------
 {1,3}
(1 row)

/*
 * Aggregation Functions
 */
SELECT hashset_agg(i) FROM generate_series(1,10) AS i;
      hashset_agg       
------------------------
 {6,10,1,8,2,3,4,5,9,7}
(1 row)

SELECT hashset_agg(h) FROM
(
    SELECT hashset_agg(i) AS h FROM generate_series(1,5) AS i
    UNION ALL
    SELECT hashset_agg(j) AS h FROM generate_series(6,10) AS j
) q;
      hashset_agg       
------------------------
 {6,8,1,3,2,10,4,5,9,7}
(1 row)

/*
 * Operator Definitions
 */
SELECT '{2}'::int4hashset = '{1}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{2}'::int4hashset = '{2}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{2}'::int4hashset = '{3}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{1,2,3}'::int4hashset = '{1,2,3}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{1,2,3}'::int4hashset = '{2,3,1}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{1,2,3}'::int4hashset = '{4,5,6}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{1,2,3}'::int4hashset = '{1,2}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{1,2,3}'::int4hashset = '{1,2,3,4}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{2}'::int4hashset <> '{1}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{2}'::int4hashset <> '{2}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{2}'::int4hashset <> '{3}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{1,2,3}'::int4hashset <> '{1,2,3}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{1,2,3}'::int4hashset <> '{2,3,1}'::int4hashset; -- false
 ?column? 
----------
 f
(1 row)

SELECT '{1,2,3}'::int4hashset <> '{4,5,6}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{1,2,3}'::int4hashset <> '{1,2}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{1,2,3}'::int4hashset <> '{1,2,3,4}'::int4hashset; -- true
 ?column? 
----------
 t
(1 row)

SELECT '{1,2,3}'::int4hashset || 4;
 ?column?  
-----------
 {1,3,2,4}
(1 row)

SELECT 4 || '{1,2,3}'::int4hashset;
 ?column?  
-----------
 {1,3,2,4}
(1 row)

/*
 * Hashset Hash Operators
 */
SELECT hashset_hash('{1,2,3}'::int4hashset);
 hashset_hash 
--------------
    868123687
(1 row)

SELECT hashset_hash('{3,2,1}'::int4hashset);
 hashset_hash 
--------------
    868123687
(1 row)

SELECT COUNT(*), COUNT(DISTINCT h)
FROM
(
    SELECT '{1,2,3}'::int4hashset AS h
    UNION ALL
    SELECT '{3,2,1}'::int4hashset AS h
) q;
 count | count 
-------+-------
     2 |     1
(1 row)

/*
 * Hashset Btree Operators
 *
 * Ordering of hashsets is not based on lexicographic order of elements.
 * - If two hashsets are not equal, they retain consistent relative order.
 * - If two hashsets are equal but have elements in different orders, their
 *   ordering is non-deterministic. This is inherent since the comparison
 *   function must return 0 for equal hashsets, giving no indication of order.
 */
SELECT h FROM
(
    SELECT '{1,2,3}'::int4hashset AS h
    UNION ALL
    SELECT '{4,5,6}'::int4hashset AS h
    UNION ALL
    SELECT '{7,8,9}'::int4hashset AS h
) q
ORDER BY h;
    h    
---------
 {9,7,8}
 {3,2,1}
 {5,6,4}
(3 rows)

